/* ragui - copyright(C) 2009-2011 - pancake<nopcode.org> */
Window using=Gtk $Ragui.PreferencesWindow modal title="Ragui preferences" destroy-event=OnWindowCloseEvent {
	VBox border-width=10 spacing=10 {
		Notebook {
			VBox spacing=5 border-width=5 {
				tab-label { Label label="Disassembler"; }

				HBox spacing=5 !expand {
					Label label="cpu" !expand;
					ComboBox text $cb_cpu !expand;

					Label label=" bits" !expand;
					ComboBox text $cb_bits !expand;

					Label label=" endian" !expand;
					ComboBox text $cb_endian !expand;
				}
				CheckButton !expand label="Hide comments" toggled=cbComments;
				CheckButton !expand label="Show stack pointer" toggled=cbStackptr $hidestck;
				HSeparator !expand;
				CheckButton !expand label="Show branch lines" toggled=cbBranchlines $hidelines;
				HBox !expand spacing=5 {
					Label !expand label="Branch lines width";
					Entry !expand $lineswidth;
				}
				HSeparator !expand;
				CheckButton !expand label="Show bytes" toggled=cbBytes $hidebytes;
				HBox !expand spacing=5 {
					Label !expand label="Bytes per opcode";
					Entry !expand $opcodebytes;
				}
				//CheckButton !expand label="Hide metadata";
			}
			VBox spacing=5 border-width=5 {
				tab-label { Label label="Analysis"; }
				CheckButton !expand label="Find function preludes"; // TODO: not used
				CheckButton $.analsplit !expand label="Split basic blocks"; // TODO: not used
				HBox !expand spacing=5 {
					Label !expand label="Depth";
					Entry !expand $analdepth;
				}
				HBox !expand spacing=5 {
					Label !expand label="Pointer depth";
					Entry !expand $analptrdepth;
				}
				HBox spacing=5 !expand {
					Label label="Plugin" !expand;
					ComboBox text $cb_anal !expand;
				}
			}
			VBox spacing=5 border-width=5 {
				tab-label { Label label="KeyBindings"; }

				Label label="See menubar for keybindings";
				// TODO: display a readonly list of keys+actions
			}
			VBox spacing=5 border-width=5 {
				tab-label { Label label="Debugger"; }

				CheckButton !expand label="Stop all threads"; // TODO: not used
				HBox spacing=5 !expand {
					Label label="Handler" !expand;
					ComboBox text $cb_dbg !expand;
				}
			}
			VBox spacing=5 border-width=5 {
				tab-label { Label label="IO"; }
				Label label="TODO: Edit sections and maps, and opened files";
			}
			VBox spacing=5 border-width=5 {
				tab-label { Label label="Appearance"; }
				Label label="TODO";
			}
			VBox spacing=5 border-width=5 {
				tab-label { Label label="Plugins"; }
				Label label="TODO";
			}
			VBox spacing=5 border-width=5 {
				tab-label { Label label="Directories"; }
				Table n-rows=3 n-columns=2 !homogeneous !expand {
					Label label="Plugins directory" attach_defaults left_attach=0 right_attach=1 top_attach=0 bottom_attach=1;
					Entry text=/bar $plugsdir       attach_defaults left_attach=1 right_attach=2 top_attach=0 bottom_attach=1;
					Label label="Project directory" attach_defaults left_attach=0 right_attach=1 top_attach=1 bottom_attach=2;
					Entry text="/foo" $prjdir       attach_defaults left_attach=1 right_attach=2 top_attach=1 bottom_attach=2;
					Label label="Temporal directory" attach_defaults left_attach=0 right_attach=1 top_attach=2 bottom_attach=3;
					Entry text="/tmp" $tmpdir       attach_defaults left_attach=1 right_attach=2 top_attach=2 bottom_attach=3;
				}
			}
		}
		HButtonBox !expand border-width=3 layout-style=ButtonBoxStyle.END {
			Button label=gtk-ok use-stock clicked=OnButtonCloseClicked;
		}
	}
-{
	public void init_stuff() {
		cb_cpu.append_text ("x86");
		cb_cpu.append_text ("x86.olly");
		cb_cpu.append_text ("arm");
		cb_cpu.append_text ("armthumb");
		cb_cpu.append_text ("mips");
		cb_cpu.append_text ("msil");
		cb_cpu.append_text ("avr");
		cb_cpu.append_text ("csr");
		cb_cpu.append_text ("dalvik");
		cb_cpu.append_text ("powerpc");
		cb_cpu.append_text ("java");
		cb_cpu.append_text ("bf");
		cb_cpu.set_active (0);

		cb_bits.append_text ("8");
		cb_bits.append_text ("16");
		cb_bits.append_text ("32");
		cb_bits.append_text ("64");
		cb_bits.set_active (2);

		cb_endian.append_text ("big");
		cb_endian.append_text ("little");
		cb_endian.set_active (1);

		lineswidth.text = gc.core.config.get_i ("asm.lineswidth").to_string ();
		opcodebytes.text = gc.core.config.get_i ("asm.nbytes").to_string ();

		/* analysis */
		analsplit.active = (gc.core.config.get_i ("anal.split") == 0)?false:true;
		analdepth.text = gc.core.config.get_i ("anal.depth").to_string ();
		analptrdepth.text = gc.core.config.get_i ("anal.ptrdepth").to_string ();
		cb_anal.append_text ("x86");
		cb_anal.append_text ("x86.simple");
		cb_anal.append_text ("ppc");
		cb_anal.append_text ("mips");
		cb_anal.append_text ("java");
		cb_anal.append_text ("dalvik");
		cb_anal.append_text ("csr");
		cb_anal.append_text ("avr");
		cb_anal.append_text ("arm");
		cb_anal.set_active (0);
	}

	private void cbBytes() {
		gc.core.config.set ("asm.bytes", (!hidebytes.active).to_string ());
	}

	private void cbStackptr() {
		gc.core.config.set ("asm.stackptr", (!hidestck.active).to_string ());
	}

	private void cbBranchlines() {
		gc.core.config.set ("asm.lines", (!hidelines.active).to_string ());
	}

	private void cbComments() {
		gc.core.config.set ("asm.bytes", "false");
	}

	public PreferencesWindow () {
		resize (400, 400);
		window_position = WindowPosition.CENTER;
		init_stuff ();
	}

	private void OnButtonCloseClicked() {
		/* save remaining changes */
		int lw = int.parse (lineswidth.text);
		if (lw>0) gc.core.config.set_i ("asm.lineswidth", lw);
		int ob = int.parse (opcodebytes.text);
		if (ob>0) gc.core.config.set_i ("asm.nbytes", ob);

		this.hide ();
	}

	private bool OnWindowCloseEvent(Gdk.Event ev) {
		this.hide ();
		return true;
	}
}-
}
