Window $BugDialog.Widget using=Gtk using:Radare=Radare {
// TODO: implement delete-event=on_delete {
	VBox border-width=5 {
		HBox !expand spacing=3 {
			Label !expand label="Description";
			Entry $desc;
		}
		Label $foo label='' !expand;
		ScrolledWindow can-focus $.scroll padding=3
				hscrollbar-policy="{PolicyType.AUTOMATIC}"
				vscrollbar-policy="{PolicyType.AUTOMATIC}" {
			TextView can-focus editable $.body wrap-mode=WrapMode.WORD;
		}
		HBox !expand spacing=3 {
			ComboBox !expand $bugtype text;
			Label label="";
			Button $butt !expand label=Send clicked=do_send_thread;
		}
	}
-{
	public Widget() {
		title = "Report issue";
		resize (400, 300);
		position = WindowPosition.CENTER;
		bugtype.append_text ("Bug Report");
		bugtype.append_text ("Usability Issue");
		bugtype.append_text ("Feature Request");
		bugtype.append_text ("Unimplemented");
		bugtype.set_active (0);
	}

	public int code;
        private unowned Thread<void*> th;

	public bool on_delete () {
		// cannot kill a thread.. just let it go //
		if (th != null || ui_is_locked) {
			//th.exit (null);
			//message ("Operatation cancelled");
			return false;
		}
		return true;
	}

	public void close () {
		this.hide ();
		this.destroy ();
	}

	public bool ui_is_locked = false;

	public void ui_lock() {
		ui_is_locked = true;
		body.editable =
		desc.editable =
		butt.sensitive =
		bugtype.sensitive = false;
		foo.label = "Sending message...";
	}

	public void ui_unlock() {
		ui_is_locked = false;
		foo.label = "";
		body.editable =
		desc.editable =
		butt.sensitive =
		bugtype.sensitive = true;
	}

	public void do_send_thread() {
		if (desc.text == "" || body.buffer.text == "") {
			message ("Empty fields?", false);
			return;
		}
		ui_lock ();
                try {
                        th = Thread.create <void*>( () => {
				do_send ();
                                return null;
                        }, true);
                        Thread.create <void*> ( () => {
                                th.join ();
                                Idle.add (() => {
					/* fix segfault if operation was cancelled */
					if (this == null)
						return false;
					if (code == 200) {
						message ("Thanks! Your bug report has been sent!", true);
					} else {
						message ("Uhmf.. there was a problem sending your report :(\n", false);
					}
					ui_unlock ();
                                        return false;
                                });
                                return null;
                        }, true);
                } catch (ThreadError e) {
			message ("The impossible happened!\n", false);
                }
	}

	public void do_send () {
		var uri = "http://radare.org/report/mail.php";
		var from = Environment.get_user_name ();
		var kind = bugtype.get_active_text ();
		var subject = desc.text;
		var message = "Type: "+kind+"\n\n"+body.buffer.text;
		// base64 encoding //
		from = Base64.encode (from.data);
		subject = Base64.encode (subject.data);
		message = Base64.encode (message.data);
		// send //
		RSocket.http_post (uri, @"from=$from&title=$subject&body=$message", out code);
	}

	public signal void message (string msg, bool pini);
}-
}
