Window $BugDialog.Widget using=Gtk using:Radare=Radare {
	VBox border-width=5 {
		HBox !expand spacing=3 {
			Label !expand label="Description";
			Entry $desc;
		}
		Label $foo label='' !expand;
		ScrolledWindow can-focus $.scroll padding=3
				hscrollbar-policy="{PolicyType.AUTOMATIC}"
				vscrollbar-policy="{PolicyType.AUTOMATIC}" {
			TextView can-focus editable $.body wrap-mode=WrapMode.WORD;
		}
		HBox !expand spacing=3 {
			ComboBox !expand $bugtype text;
			Label label="";
			Button !expand label=Send clicked=do_send_thread;
		}
	}
-{
	public Widget() {
		title = "Report issue";
		resize (400, 300);
		bugtype.append_text ("Bug Report");
		bugtype.append_text ("Usability Issue");
		bugtype.append_text ("Feature Request");
		bugtype.append_text ("Unimplemented");
		bugtype.set_active (0);
	}

	int code;
        private unowned Thread<void*> th;

	public void ui_lock() {
		//bugtype.focus_on_click = false;
		body.editable = false;
		desc.editable = false;
		foo.label = "Sending message...";
	}

	public void ui_unlock() {
		//bugtype.focus_on_click = true;
		foo.label = "";
		body.editable = true;
		desc.editable = true;
	}

	public void do_send_thread() {
		if (desc.text == "" || body.buffer.text == "") {
			send_fail ();
			return;
		}
		ui_lock ();
                try {
                        th = Thread.create <void*>( () => {
				do_send ();
                                return null;
                        }, true);
                        Thread.create <void*> ( () => {
                                th.join ();
                                Idle.add (() => {
					if (code == 200) {
						print ("Thanks!\n\n");
						send_ok ();
					} else {
						print ("Oops. problem here :(\n");
						send_fail ();
					}
					ui_unlock ();
                                        return false;
                                });
                                return null;
                        }, true);
                } catch (ThreadError e) {
			print ("The impossible happened!\n");
                        //send_fail ();
                }
	}

	public void do_send () {
		var uri = "http://radare.org/report/mail.php";
		var from = Environment.get_user_name ();
		var kind = bugtype.get_active_text ();
		var subject = desc.text;
		var message = "Type: "+kind+"\n\n"+body.buffer.text;
		RSocket.http_post (uri, @"from=$from&title=$subject&body=$message", out code);
	}

	public signal void send_ok ();
	public signal void send_fail ();
}-
}
