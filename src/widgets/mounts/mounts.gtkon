VBox $Mounts.Widget border-width=5 using=Gtk:Radare:Ragui:Gdk:Listview {
	HBox !expand spacing=3 {
		ComboBox !expand $fstype text;
		Entry $mountpoint;
		Entry $offset;
		Button !expand label=mount clicked={
			do_mount (fstype.get_active_text (), mountpoint.text,
					uint64.parse (offset.text));
		};
		Button !expand label=partitions clicked=show_partitions;
	}
	VPaned position=200 {
		Listview:Widget $listview;
		VBox add2 {
			HBox !expand {
				Entry $url activate={
					var tmp=path;
					path=url.text;
					if (!update_icons())
						path = tmp;
				} ;
				Button label=go clicked={
					var tmp=path;
					path=url.text;
					if (!update_icons())
						path = tmp;
				} !expand;
			}
			ScrolledWindow $scroll vscrollbar-policy="{PolicyType.AUTOMATIC}"
				hscrollbar-policy="{PolicyType.AUTOMATIC}" {
					IconView $dirs button_release_event=rclick button_press_event=dclick;
				}
		}
	}
-{
	public RFS *fs = null;
	public ListStore model;
	private new string path;

	public Widget() {
		fstype.append_text ("cpio");
		fstype.append_text ("ext2");
		fstype.append_text ("fat");
		fstype.append_text ("fb");
		fstype.append_text ("hfs");
		fstype.append_text ("hfsplus");
		fstype.append_text ("iso9660");
		fstype.append_text ("jfs");
		fstype.append_text ("minix");
		fstype.append_text ("ntfs");
		fstype.append_text ("posix");
		fstype.append_text ("reiserfs");
		fstype.append_text ("sfs");
		fstype.append_text ("tar");
		fstype.append_text ("udf");
		fstype.append_text ("ufs");
		fstype.append_text ("xfs");
		fstype.set_active (0);
		mountpoint.text = "/";
		offset.text = "0";
		listview.set_actions ("Show", "Umount");
		listview.row_activated.connect ((row) => {
				listview.menu_handler ("Show", row);
				return true;
			});
		listview.menu_handler.connect ((action, row) => {
				if (fs == null || row == null) {
					stderr.printf ("Oops: fs is null\n");
					return;
				}
				switch (action) {
				case "Show":
					path = row.name;
					update_icons ();
					break;
				case "Umount":
					print (@"Umount $(row.name)\n");
					do_umount (row.name);
					break;
				}
			});
		model = new ListStore (3, typeof (string), typeof (Gdk.Pixbuf), typeof (RFSFile));
		dirs.model = (model);
		dirs.set_item_width (100);
		dirs.set_columns (0);
		dirs.set_orientation (Orientation.VERTICAL);
		dirs.set_text_column (0);
		dirs.set_pixbuf_column (1);
	}

	public void do_mount (string type, string path_text, uint64 off) {
		void *p = fs->mount (type, path_text, off);
		if (p == null) {
			// TODO: how to call gc.show_error() ?
			gc.show_error ("Cannot mount filesystem");
		} else {
			update_list ();
			path = path_text;
			update_icons ();
		}
	}

	public void update_list () {
		listview.clear ();
		foreach (var root in fs->roots) {
			//print (@"MOUNT ($(root.delta)) ($(root.path))\n");
			listview.add_row (root.delta, root.path);
		}
	}

	//TODO: Don't clear model if partition umounted its different
	public void do_umount (string str) {
		model.clear ();
		fs->umount (str);
		update_list ();
	}

	public bool update_icons () {
		TreeIter iter;
		RList<RFSFile> ds;

		chop_path ();
		ds = fs->dir (path);
		if (ds != null) {
			if (ds.length () > 0) {
				model.clear ();
				foreach (var file in ds) {
					var pbuf = dirs.render_icon (
							(file.type == 'd')?Stock.OPEN:Stock.FILE,
							IconSize.DIALOG, null);
					model.append (out iter);
					model.set (iter, 0, file.name, 1, pbuf, 2, file);
				}
				url.text = path;
				return true;
			} else print (@"Directory $(path) is empty!\n");
		}
		return false;
	}

	private bool rclick (Gtk.Widget _w, Gdk.EventButton eb) {
		RFSFile *item = get_item ();
		if (eb.button != 3)
			return false;
		var menu = new Menu();

		var imi = new ImageMenuItem.with_label ("Back");
		imi.activate.connect ((x)=> {
				path += "/..";
				update_icons ();
			});
		menu.append (imi);

		if (item != null) {
			if (item->type == 'd') {
				imi = new ImageMenuItem.with_label ("Open");
				imi.activate.connect ((x)=> {
						if (item == null || item->type != 'd')
							return;
						path += "/"+item->name;
						update_icons ();
						});
				menu.append (imi);
			} else {
				imi = new ImageMenuItem.with_label ("Dump to file");
				imi.activate.connect ((x)=> { dump_file (item->name); });
				menu.append (imi);

			}
			imi = new ImageMenuItem.with_label ("Properties");
			imi.activate.connect ((x)=> { properties_menu (item); });
			menu.append (imi);
		}

		menu.show_all ();
		menu.popup (null, null, null, 0, 0);
		return false;
	}

	public bool dclick (Gtk.Widget _w , Gdk.EventButton eb) {
		switch (eb.type) {
		case EventType.@2BUTTON_PRESS:
			RFSFile *item = get_item ();
			if (item == null)
				return false;
			switch (item->type) {
			case 'f':
				properties_menu (item);
				break;
			case 'd':
				path += "/"+item->name;
				update_icons ();
				break;
			}
			return true; // does not pass the event to the rest of widgets
		}
		return false;
	}

	public RFSFile *get_item () {
		TreeIter iter;
		RFSFile *file = null;
		GLib.List<unowned Gtk.TreePath> list = dirs.get_selected_items ();

		if (list == null || list.length () == 0)
			return file;
		var model = dirs.get_model ();
		if (model.get_iter (out iter, (TreePath)list.data))
			model.get (iter, 2, out file);
		return file;
	}

	public void chop_path () {
		try {
			path += "/";
			Regex reg1 = new Regex ("/[^/]*/\\.\\./");
			path = reg1.replace (path, path.length, 0, "/");
			Regex reg2 = new Regex ("/./");
			path = reg2.replace (path, path.length, 0, "/");
			Regex reg3 = new Regex ("//");
			path = reg3 .replace (path, path.length, 0, "/");
			Regex reg4 = new Regex ("/$");
			path = reg4.replace (path, path.length, 0, "");
			if (path == "") {
				path = "/";
			}
		} catch (RegexError e) {
			gc.show_error ("Error at chop_path");
		}
	}

	public void dump_file (string name) {
		RFSFile file = fs->open (path+"/"+name);
		fs->read (file, 0, (int) file.size);
		var ofile = gc.show_file_save ("Dump File", null);
		if (ofile != null) {
			try {
				FileUtils.set_contents (ofile, (string) file.data, file.size);
			} catch (FileError e) {
				gc.show_error ("Dump error: "+e.message);
			}
		}
		fs->close (file);
	}

	public void properties_menu (RFSFile* item) {
		if (item != null) {
			stdout.printf ("Name: %s\nType: %c\n",
					item->name, item->type);
			var wi = new Gtk.Window ();
			wi.modal = false; // not modal.. main ragui window can still be usable
			wi.transient_for = gc.window;
			wi.title = @"$(item->name) properties";
			wi.set_default_size (200, 300);

			var vbox = new VBox (false, 0);
			var pbuf = this.render_icon (
					(item->type == 'd')?Stock.OPEN:Stock.FILE,
					IconSize.DIALOG, null);
			var lv = new Listview.Widget ();
			lv.show_headers = false;
			vbox.pack_start (new Gtk.Image.from_pixbuf (pbuf), false, false, 10);
			lv.add_row_s ("name", item->name);
			lv.add_row_s ("path", item->path);
			lv.add_row_s ("size", item->size.to_string ());
			lv.add_row_s ("time", item->time.to_string ());
			lv.add_row_s ("offset", item->off.to_string ("0x%08"+uint64.FORMAT_MODIFIER+"x"));
			vbox.add (lv);
			wi.add (vbox);
			wi.show_all ();
		}
	}

	public void show_partitions () {
		RList<RFSPartition> ls;

		ls = fs->partitions ("msdos", 0);
		if (ls != null) {
			if (ls.length () > 0) {
				var wi = new Gtk.Window ();
				wi.modal = false; // not modal.. main ragui window can still be usable
				wi.transient_for = gc.window;
				wi.title = @"Partitions";
				wi.set_default_size (200, 300);
				var lv = new Listview.Widget ();
				lv.set_actions ("Mount", "Properties");
				lv.row_activated.connect ((row) => {
						lv.menu_handler ("Mount", row);
						return true;
				});
				lv.menu_handler.connect ((action, row) => {
					switch (action) {
						case "Mount":
							path = row.name;
							do_mount (row.name, "/"+row.name+row.offset.to_string (), row.offset);
							update_icons ();
							break;
						case "Properties":
							print (@"Umount $(row.name)\n");
							break;
					}
				});
				lv.clear ();
				foreach (var part in ls) {
					var type = fs->partition_type ("msdos", part.type);
					lv.add_row (part.start, type);
					stdout.printf ("Type(%i): %s\nOffset: %llx\n",
							part.number, type , part.start);
				}
				wi.add (lv);
				wi.show_all ();
			} else gc.show_error ("No partitions found!\n");
		} else gc.show_error ("No partitions found!\n");
	}
}-
}
