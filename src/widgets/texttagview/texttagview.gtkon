/* gcode - Copyright(C) 2009-2010 - nibble<develsec.org> pancake<nopcode.org> */

HBox using=Gtk using:p=Pango $Ragui.TextTagView {
	ScrolledWindow can-focus hscrollbar-policy="{PolicyType.AUTOMATIC}" $.scroll {
		TextView can-focus !editable $.code;
	}
-{
	public signal void data_handler(bool down);
	public signal void link_clicked(string url);
	private Adjustment vadj;
	private TextTag couriertag;
	private TextTag bluetag;
	private TextTag undertag;

	private string word { get; set; }

	private string getword(char *txt, int off) {
		char *p = (char*)(txt)+off;
		for (;p>(char*)txt;p--) {
			if (is_separator (*p)) {
				p++;
				break;
			}
		}
		char *p2 = p;
		for (;*p2!=0;p2++) {
			if (is_separator (*p2))
				break;
		}
		int wrdlen = (int)(p2-p);
		return ((string)p)[0:wrdlen];
	}

	private inline bool is_separator (char p) {
		return (p==' '||p=='\n'||p=='\r'||p=='\t'||p==',');
	}

	public TextTagView() {
		reset_style ();
		vadj = scroll.get_vadjustment();
		vadj.value_changed.connect (scroll_change);
		couriertag = code.buffer.create_tag ("cour", "family", "mono", "weight", "bold");
		bluetag = code.buffer.create_tag ("blue", "foreground", "blue");
		undertag = code.buffer.create_tag ("ul", "underline-set", 1, "underline", 1);
		code.cursor_visible = false;
		code.button_release_event.connect((x)=> {
			var is_selected = code.buffer.has_selection;
			var cur = code.buffer.cursor_position;
			var txt = code.buffer.text;
			TextIter ti;
			code.buffer.get_iter_at_offset (out ti, cur);
			var off = ti.get_offset ();
			var lof = ti.get_line_offset ();
			var len = ti.get_chars_in_line ();
			var idx = ti.get_visible_line_index ();
			var linetxt = txt[idx:idx+len];

			word = getword (txt, off);
			foreach (var a in ti.get_tags ()) {
			//	print ("TAG: %s %d\n", a.name, a.size);
				if (a.name[0] == 'a') {
					var url = "";
					if (a.name.length>2)
						url = a.name[2:a.name.length];
					print ("Link clicked '%s'\n", url);
					link_clicked (url);
				}
			}
			//print ("LINE (%d) off=%d lof=%d idx=%d (%s)\n", ti.get_line (), off, lof, idx, linetxt);
			//print ("WORD (%s)\n", word);
			return false;
		});
	}

	private void scroll_change() {
		var adjvalue = vadj.get_value ();
		if (adjvalue == 0) {
			vadj.set_value (100);
			data_handler (false);
		} else if (adjvalue + vadj.get_page_size () == vadj.get_upper ()) {
			data_handler (true);
		}
	}

	private bool tag_parse_internal(TextTag tag, string[] args) {
		switch (args[0]) {
		case "b":
			tag.weight = Pango.Weight.BOLD;
			break;
		case "f":
			tag.family = args[1];
			break;
		case "i":
			tag.style = Pango.Style.ITALIC;
			break;
		case "s":
			if (args.length<2)
				return false;
			tag.size = args[1].to_int ();
			break;
		case "a":
			tag.weight = Pango.Weight.BOLD;
			tag.underline = Pango.Underline.SINGLE;
			tag.foreground = "blue";
			break;
		case "u":
			tag.underline = Pango.Underline.SINGLE;
			break;
		case "c":
			if (args.length<2)
				return false;
			if (args[1] != "?")
				tag.foreground = args[1];
			if (args.length>2 && args[2] != "?")
				tag.background = args[2];
			break;
		}
		return true;
	}

	public bool tag_parse(TextTag tag, string[] args) {
		var style = styles.lookup (args[0]);
		if (style != null)
			foreach (var stu in style.split (","))
				tag_parse_internal (tag, stu.split (" "));
		return tag_parse_internal (tag, args);
	}

	TextTag? curtag = null;

	// TODO: implement stack for tags?
	public void tag_push(TextTag tag) {
		//tagstack.append (tag);
		//code.buffer.tag_table.add (tag);
		curtag = tag;
	}

	public void tag_pop() {
		curtag = null;
	}

	public TextTag? tag_get() {
		return curtag;
		// generate new tag with all the stacked ones
	}

	public void clear () {
		// remove tags
		// remove images
		code.buffer.text = "";
	}

	public HashTable<string,string> styles;

	public void set_style(string key, string val) {
		styles.replace (key, val);
	}

	public void reset_style() {
		styles = new HashTable<string,string>(str_hash, str_equal);
	}

	public void set_style_string(string str) {
		foreach (var kv in str.split (";")) {
			var a = kv.split (":");
			if (a.length == 2)
				set_style (a[0], a[1]);
			else warning ("kv split fail\n");
		}
	}

	public void set_markup(string str, bool append=true) {
		char c = 0;
		string s = "";
		string s2 = "";
		Gtk.TextIter ei; 
		if (append) code.buffer.get_end_iter (out ei); 
		else code.buffer.get_start_iter (out ei); 

		for (int i=0; i<str.length; i++) {
			var ch = str.get_char (i);
			switch (c) {
			case '&':
				if (ch==';') {
					switch (s2) {
					case "amp": s += "&"; break;
					case "gt": s += ">"; break;
					case "lt": s += "<"; break;
					default: s += "&"+s2+";"; break;
					}
					c = 0;
					s2 = "";
				} else s2 += ch.to_string ();
				break;
			case '<':
				if (ch=='>') {
					if (s2[0]=='/') {
						var t = tag_get ();
						if (t != null)
							code.buffer.insert_with_tags (ei, s, -1, t);
						else code.buffer.insert (ei, s, -1);
						if (append) code.buffer.get_end_iter (out ei); 
						else code.buffer.get_start_iter (out ei); 
						// tag close
						tag_pop ();
						s = "";
					} else {
						var foo = code.buffer.tag_table.lookup (s2);
						if (foo == null) {
							if (s2[1]!=':') {
								var mytag = new TextTag (s2); //"tag%p".printf (s2));
								var tags = s2.split (",");
								foreach (var tag in tags) {
									var tag_args = tag.split (" ");
									if (!tag_parse (mytag, tag_args))
										error ("Invalid tag parsed\n");
								}
								code.buffer.tag_table.add (mytag);
								tag_push (mytag);
							} else set_style_string (s2);
						} else tag_push (foo);
						if (s2[s2.length-1]=='/') {
							// OPEN AND CLOSE TAG
							tag_pop ();
						}
					}
					c = 0;
					s2 = "";
				} else s2 += ch.to_string ();
				break;
			default:
				switch (ch) {
				case '&':
				case '<':
					if (tag_get () == null) {
						code.buffer.insert (ei, s, -1);
						s="";
					}
					c = (char) ch;
					break;
				default:
					s += ch.to_string ();
					break;
				}
				break;
			}
		}
		code.buffer.insert (ei, s, -1);
		c = 0;
		s = "";
	}

/* XXX DEPRECATED */
	public void prepend_text(string str) {
		Gtk.TextIter ei; 
		code.buffer.get_start_iter (out ei); 
		code.buffer.insert (ei, str, -1);
	}

	public void append_text(string str) {
		Gtk.TextIter ei; 
		code.buffer.get_end_iter (out ei); 
		code.buffer.insert (ei, str, -1);
	}

	public void set_text(string str, bool append = true) {
		Gtk.TextIter ei; 
		Gtk.TextMark im;
		if (append) code.buffer.get_end_iter (out ei); 
		else code.buffer.get_start_iter (out ei); 
		var strs = str.split ("\n");
		foreach (var s in strs) {
			if (s.str ("mov") != null) {
				code.buffer.insert_with_tags (ei, s, -1, couriertag, bluetag, undertag);
			} else {
				code.buffer.insert_with_tags (ei, s, -1, couriertag);
			}
			code.buffer.insert (ei, "\n", -1);
		//code.buffer.insert_with_tags (ei, str, -1); //, couriertag, bluetag, undertag);
		}
		//code.buffer.insert (ei, str, -1);
		/* Autoscroll */
		code.buffer.get_end_iter (out ei); 
		im = code.buffer.get_insert (); 
		code.buffer.place_cursor (ei); 
		code.scroll_to_mark (im, 0.0, true, 0.0, 1.0);
	}
/* XXX DEPRECATED */
}-
}
