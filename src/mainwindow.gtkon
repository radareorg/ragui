/* ragui - copyright(C) 2009-2010 - pancake<nopcode.org> */

Window gtkon:version=0.4 using=Gtk name=Ragui.MainWindow title="ragui"
	delete-event="OnWindowCloseEvent"
	using:Ragui="Ragui"
	using:Grava="Grava"
	using:Grasmwidget="Grasmwidget"
	using:Codeview="Codeview"
	using:Hexview="Hexview"
	using:Listview="Listview"
{
	VBox border-width=1 {
		MenuBar !expand {
			MenuItem label="_Project" with-mnemonic {
				submenu {
					Menu {
						ImageMenuItem stock-id="gtk-new" activate=OnNew;
						ImageMenuItem stock-id="gtk-open" activate=OnOpenProject;
						ImageMenuItem stock-id="gtk-save" activate=OnFileSave;
						ImageMenuItem stock-id="gtk-save-as"; // activate=OnFileSave;
						ImageMenuItem stock-id="gtk-close" activate=OnFileClose;
						SeparatorMenuItem;
						ImageMenuItem stock-id="gtk-quit" activate="OnQuit";
					}
				}
			}
			MenuItem $menu_edit label="_Edit" with-mnemonic {
				submenu {
					Menu {
						ImageMenuItem stock-id="gtk-cut";
						ImageMenuItem stock-id="gtk-copy";
						ImageMenuItem stock-id="gtk-paste";
						SeparatorMenuItem;
						ImageMenuItem stock-id="gtk-preferences" activate="OnMenuEditPreferences";
					}
				}
			}
			MenuItem $menu_view label="_View" with-mnemonic {
				submenu {
					Menu {
						ImageMenuItem stock-id="left panel";
						ImageMenuItem stock-id="console";
						ImageMenuItem stock-id="graph";
						ImageMenuItem stock-id="code";
						ImageMenuItem stock-id="hexdump";
						ImageMenuItem stock-id="headers";
						SeparatorMenuItem;
						ImageMenuItem stock-id="reset";
					}
				}
			}
			MenuItem label="_Tools" with-mnemonic {
				submenu {
					Menu {
						ImageMenuItem stock-id="Calculator";
						ImageMenuItem stock-id="Assembler" activate="menuToolsAssembler";
						ImageMenuItem stock-id="Headers" activate="menuToolsHeaders";
						ImageMenuItem stock-id="Scripting";
						SeparatorMenuItem;
						ImageMenuItem stock-id="Plugin manager";
					}
				}
			}
			MenuItem label="_Help" with-mnemonic {
				submenu {
					Menu {
						ImageMenuItem stock-id="API documentation" activate="OnMenuHelpAPI";
						ImageMenuItem stock-id="gtk-help";
						SeparatorMenuItem;
						ImageMenuItem stock-id="gtk-about" activate="OnMenuHelpAbout";
					}
				}
			}
		}
/*
		Toolbar !expand {
			Button use-stock label="preferences";
			VSeparator;
			Button use-stock label="breakpoint";
			Button use-stock label="step";
			Button use-stock label="continue";
		}
*/
		VBox $box_body;
/*
		HBox !expand {
			ProgressBar !expand;
			Statusbar expand;
		}
*/
	}

	AboutDialog gtkaml:standalone $.aboutdialog delete-event="aboutdialog.hide_on_delete"
		border-width=5 title="About ragui" !resizable modal !has-separator
		window-position=WindowPosition.CENTER_ON_PARENT
		program-name="ragui" version="0.1"
		copyright="Copyright (c) 2009-2010 pancake/nibble"
		comments="Graphical hexeditor, disassembler and debugger"
		website="http://www.radare.org/"
		authors='{new string[] {"pancake (pancake@nopcode.org)", "nibble (nibble.ds@gmail.com)", null}}';

	-{
		public signal void on_quit();

		private void OnNew() {
			Pid pid;
			string[] runme = { gc.arg0 };
			try {
				Process.spawn_async (null, runme, null,
						SpawnFlags.DO_NOT_REAP_CHILD, null, out pid);
			} catch (GLib.SpawnError err) {
				print ("Error: %s\n", err.message);
			}
			//public delegate void ChildWatchFunc (Pid pid, int status);
		}

		private void OnOpenProject() {
			panel.onOpenProject ();
		}

		private void OnQuit() {
			on_quit();
		}

		private void OnFileSave() {
			/* TODO */
		}

		private void OnFileClose() {
			/* TODO: warn if file not saved, etc.. */
			view_panel ();
		}

		public MainWindow () {
			panel = new MainPanel ();
			//Grava.XDot.import (grava.graph, "widgets/grava/test.xdot");
		}

		private void menuToolsHeaders() {
			var w = new Window (WindowType.TOPLEVEL);
			w.title = "ragui: grabin";
			var grabin = new Grabin.All (gc.core.bin);
			grabin.sections.set_actions ("Seek");
			grabin.sections.menu_handler.connect ((m, d) => {
					print ("Sections clicked "+m+": "+d+"\n");
				});
			grabin.symbols.set_actions ("Seek");
			grabin.symbols.menu_handler.connect ((m, d) => {
					print ("Symbols clicked "+m.to_string ()+": "+d+"\n");
				});
			grabin.imports.set_actions ("Seek");
			grabin.imports.menu_handler.connect ((m, d) => {
					print ("Imports clicked "+m.to_string ()+": "+d+"\n");
				});
			grabin.strings.set_actions ("Seek");
			grabin.strings.set_retcolumn (Grabin.Strings.COLUMN.String);
			grabin.strings.menu_handler.connect ((m, d) => {
					print ("Strings clicked "+m.to_string ()+": "+d+"\n");
				});
			grabin.relocs.set_actions ("Seek");
			grabin.relocs.menu_handler.connect ((m, d) => {
					print ("Relocations clicked "+m.to_string ()+": "+d+"\n");
				});
			grabin.fat.set_actions ("Load", "Extract");
			grabin.fat.menu_handler.connect ((m, d) => {
					print ("SubBin clicked "+m.to_string ()+": "+d+"\n");
				});
			w.add (grabin);
			w.show_all ();
		}

		private void menuToolsAssembler() {
			var w = new Window (WindowType.TOPLEVEL);
			w.title = "ragui: assembler";
			var grasm = new Grasmwidget.Widget ();
			w.add (grasm);
			w.show_all ();
		}

		private bool OnWindowCloseEvent(Gdk.Event ev) {
			OnQuit();
			return true;
		}

		private void OnMenuEditPreferences () {
			Ragui.PreferencesWindow pw = new Ragui.PreferencesWindow();
			pw.transient_for = this;
			pw.show_all();
		}

		public void OnMenuHelpAbout () {
			aboutdialog.transient_for = this;
			aboutdialog.run ();
			aboutdialog.hide();
		}

		public void OnMenuHelpAPI () {
/* This is the theorically portable way.. but it doesnt works
			try {
				var file = File.new_for_path ("http://www.radare.org/vdoc");
				var handler = file.query_default_handler (null);
				var list = new List<File> ();
				list.append (file);
				var result = handler.launch (list, null);
			} catch (GLib.Error err) {
				print ("Error: %s\n", err.message);
			}
*/


			Pid pid;
			string[] runme = { "/usr/bin/xdg-open", "http://www.radare.org/vdoc" };
			try {
				if (!Process.spawn_async (null, runme, null,
						SpawnFlags.DO_NOT_REAP_CHILD, null, out pid))
					return;
			} catch (GLib.SpawnError err) {
				print ("Error: %s\n", err.message);
			}
			//public delegate void ChildWatchFunc (Pid pid, int status);
			//ChildWatch.add (pid, (pid,status)=> {});
		}

		/* user defined window constructor */
		/*
		   public MainWindow() {
		   leftbox.append_text ("Hello world");
		   leftbox.append_text ("bar low");
		   }
		 */
		public MainPanel panel;
		public MainBody body;

		public void view_panel () {
			panel.show_all ();
			body.hide ();
			box_body.children = null;
			box_body.add (panel);
			box_body.show_all ();
			menu_view.sensitive = false;
			menu_edit.sensitive = false;
		}

		public void view_body () {
			if (body == null)
				body = new MainBody ();
			box_body.children = null;
			box_body.add (body);
			box_body.show_all ();
			panel.hide ();
			body.show_all ();
			menu_view.sensitive = true;
			menu_edit.sensitive = true;
		}

		public void setup_view () {
			if (body != null) {
				body.setup_view ();
			}
		}
	}-
}
