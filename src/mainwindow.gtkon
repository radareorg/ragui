/* ragui - copyright(C) 2009-2011 - pancake<nopcode.org> */

Window $Ragui.MainWindow title="ragui" delete-event="OnWindowCloseEvent"
	using=Gtk:Radare:Ragui:Grava:Grasmwidget:Codeview:Hexview:Listview:Gracalc:BugDialog
{
	VBox border-width=1 {
		MenuBar !expand {
			MenuItem label="_Project" with-mnemonic {
				submenu {
					Menu {
						ImageMenuItem stock-id="gtk-new" activate=on_project_new;
						ImageMenuItem stock-id="gtk-open" activate=on_project_open;
						ImageMenuItem stock-id="gtk-save" activate=on_project_save;
						ImageMenuItem stock-id="gtk-save-as" activate=on_project_save_as;
						ImageMenuItem stock-id="gtk-close" activate=OnFileClose;
						SeparatorMenuItem;
						ImageMenuItem stock-id="gtk-preferences" activate="OnMenuEditPreferences";
						SeparatorMenuItem;
						ImageMenuItem stock-id="gtk-quit" activate="OnQuit";
					}
				}
			}
			/*
			MenuItem $menu_edit label="_Edit" with-mnemonic {
				submenu {
					Menu {
						ImageMenuItem stock-id="gtk-cut";
						ImageMenuItem stock-id="gtk-copy";
						ImageMenuItem stock-id="gtk-paste";
						SeparatorMenuItem;
					}
				}
			}
			// used to hook keybindings
			MenuItem $menu_view label="_View" with-mnemonic {
				submenu {
					Menu {
						ImageMenuItem stock-id="Left panel" activate="menuViewLeftpanel";
						ImageMenuItem stock-id="Console";
						ImageMenuItem stock-id="Graph";
						ImageMenuItem stock-id="Code";
						ImageMenuItem stock-id="Hexdump";
						ImageMenuItem stock-id="Headers";
						SeparatorMenuItem;
						ImageMenuItem stock-id="Reset";
					}
				}
			}
			MenuItem $menu_debug label="_Debug" with-mnemonic {
				submenu {
					Menu {
						ImageMenuItem stock-id="Step";
						ImageMenuItem stock-id="Interrupt";
						ImageMenuItem stock-id="Continue";
						SeparatorMenuItem;
						ImageMenuItem stock-id="Breakpoints";
						ImageMenuItem stock-id="Registers";
						ImageMenuItem stock-id="Libraries";
						ImageMenuItem stock-id="Memory";
						SeparatorMenuItem;
						ImageMenuItem stock-id="Traces";
					}
				}
			}
			*/
			MenuItem label="_Tools" with-mnemonic {
				submenu {
					Menu {
						ImageMenuItem stock-id="Analyze .." activate=menuToolsAnalyze;
						ImageMenuItem stock-id="Assembler" activate=menuToolsAssembler;
						//ImageMenuItem stock-id="Bindiff ..." activate=menuProjectDiff;
						ImageMenuItem stock-id="Calculator" activate=menuToolsCalculator;
						ImageMenuItem stock-id="Console" activate=menuToolsConsole;
						ImageMenuItem stock-id="Headers" activate=menuToolsHeaders;
						ImageMenuItem stock-id="Scripting" activate=menuToolsScripting;
						ImageMenuItem stock-id="PatchSets" activate=menuToolsPatchSets;
						ImageMenuItem stock-id="Signatures .." activate=menuToolsSignatures;
						SeparatorMenuItem;
						ImageMenuItem stock-id="Plugin manager";
					}
				}
			}
			MenuItem $menu_mode label="_Mode" with-mnemonic {
				submenu {
					Menu {
						RadioMenuItem with-label group=mode_group label=Editor $.mode_e; //toggled=mode_changed;
						RadioMenuItem with-label group=mode_e.get_group() label=Bindiff $.mode_b toggled=mode_changed;
						RadioMenuItem with-label group=mode_e.get_group() label=Debugger $.mode_d toggled=mode_changed;
						RadioMenuItem with-label group=mode_e.get_group() label=Forensics $.mode_f toggled=mode_changed;
					}
				}
			}
			MenuItem label="_Help" with-mnemonic {
				submenu {
					Menu {
						ImageMenuItem stock-id="API documentation" activate="OnMenuHelpAPI";
						ImageMenuItem stock-id="Report issue" activate="OnReportBug";
						ImageMenuItem stock-id="gtk-help";
						SeparatorMenuItem;
						ImageMenuItem stock-id="gtk-about" activate="OnMenuHelpAbout";
					}
				}
			}
		}
/*
		Toolbar !expand {
			Button use-stock label="preferences";
			VSeparator;
			Button use-stock label="breakpoint";
			Button use-stock label="step";
			Button use-stock label="continue";
		}
*/
		VBox $box_body;

		HBox !expand {
			ProgressBar !expand;
			Statusbar expand;
		}
	}

//XXX dupped in mainbody or wtf?
	AboutDialog gtkaml:standalone $.aboutdialog delete-event="aboutdialog.hide_on_delete"
		border-width=5 title="About ragui" !resizable modal !has-separator
		window-position=WindowPosition.CENTER_ON_PARENT
		program-name=ragui version=0.1
		copyright="Copyright (c) 2009-2011 pancake/nibble/earada"
		comments="Graphical hexadecimal editor, disassembler and debugger"
		website="http://www.radare.org/"
		authors='{new string[] {"pancake (pancake@nopcode.org)", "nibble (nibble@develsec.org)", "earada (edu@hardcoders.org)", null}}';

	-{
		SList <RadioMenuItem> mode_group;
		public signal void on_quit();
		public MainPanel panel;
		public BodyEditor body_editor = null;
		public BodyBindiff body_bindiff = null;
		public BodyForensics body_forensics = null;
		public BodyDebugger body_debugger = null;
		private string _ui_mode = "editor";

		public void mode_changed () {
			string new_mode = "unknown";
			if (mode_e.active) new_mode = "editor";
			else if (mode_d.active) new_mode = "debugger";
			else if (mode_f.active) new_mode = "forensics";
			else if (mode_b.active) new_mode = "bindiff";
			if (new_mode != _ui_mode)
				ui_mode (new_mode);
			_ui_mode = new_mode;
		}

		public void ui_mode(string mode) {
			print ("MODE IS NOW "+mode+"\n");
			switch (mode) {
			case "editor":
				view_body_editor ();
				break;
			case "debugger":
				view_body_debugger ();
				break;
			case "forensics":
				view_body_forensics ();
				break;
			case "bindiff":
				view_body_bindiff ();
				break;
			default:
				view_panel ();
				break;
			}
		}

		private void on_project_new() {
			Pid pid;
			string[] runme = { gc.arg0 };
			try {
				Process.spawn_async (null, runme, null,
						SpawnFlags.DO_NOT_REAP_CHILD, null, out pid);
			} catch (GLib.SpawnError err) {
				stderr.printf ("Error: %s\n", err.message);
			}
			//public delegate void ChildWatchFunc (Pid pid, int status);
		}

		private void on_project_open() {
			panel.onOpenProject ();
		}

		private void OnQuit() {
			on_quit ();
		}

		private void menuProjectDiff() {
			var file = gc.show_file_open ("Bindiff against...");
			if (file != null)
				gc.system ("ragdiff2 %s %s &".printf (gc.core.file.filename, file));
		}

		private void on_project_save() {
			if (is_open) {
				if (gc.prjfile != null) {
					gc.project_save (gc.prjfile);
				} else on_project_save_as ();
			} else gc.show_error ("Nothing to save");
		}

		private void on_project_save_as() {
			if (is_open) {
				var prj = gc.show_input ("Project name", gc.prjfile);
				if (prj != null && prj != "") {
					gc.project_save (prj);
				} else gc.show_message ("Nothing done");
			} else gc.show_error ("Nothing to save");
		}

		private bool is_open;

		private void OnFileClose() {
			/* TODO: warn if file not saved, etc.. */
			if (is_open)
				view_panel ();
		}

		public MainWindow () {
			//panel = new MainPanel ();
			window_position = WindowPosition.CENTER;
			//Grava.XDot.import (grava.graph, "widgets/grava/test.xdot");
		}

		private void menuToolsPatchSets() {
			gc.show_error ("TODO");
		}

		private void menuToolsSignatures() {
			var w = new Signatures ();
			w.show_all ();
		}

		private void menuToolsConsole() {
			var w = new Window (WindowType.TOPLEVEL);
			w.resize (800, 400);
			w.title = "ragui: console";
			var cons = new Ragui.Console ();
			cons.cmd_handler.connect ((x) => {
				var prompt = ("[0x%08"+uint64.FORMAT_MODIFIER+"x] ").printf (gc.core.offset);
				var cmd = gc.core.cmd_str (x);
				cons.set_text (prompt+x+"\n"+cmd);
			});
			w.add (cons);
			w.show_all ();
		}


		private void menuToolsScripting () {
			var w = new Window (WindowType.TOPLEVEL);
			w.resize (800, 400);
			w.title = "ragui: grabin";
			w.transient_for = this;
			w.window_position = WindowPosition.CENTER;
			var scr = new Script.Widget ();
			w.add (scr);
			w.show_all ();
		}

		private void menuToolsAnalyze() {
			var w = new Analyze ();
			w.transient_for = this;
			w.window_position = WindowPosition.CENTER;
			w.show_all ();
		}

		private void menuToolsHeaders() {
			var w = new Window (WindowType.TOPLEVEL);
			w.resize (800, 400);
			w.title = "ragui: grabin";
			var grabin = new Grabin.All (gc.core.bin);
			grabin.sections.set_actions ("Seek");
			grabin.sections.menu_handler.connect ((m, d) => {
					print ("Sections clicked "+m+": "+d+"\n");
				});
			grabin.symbols.set_actions ("Seek");
			grabin.symbols.menu_handler.connect ((m, d) => {
					print ("Symbols clicked "+m.to_string ()+": "+d+"\n");
				});
			grabin.imports.set_actions ("Seek");
			grabin.imports.menu_handler.connect ((m, d) => {
					print ("Imports clicked "+m.to_string ()+": "+d+"\n");
				});
			grabin.strings.set_actions ("Seek");
			grabin.strings.set_retcolumn (Grabin.Strings.COLUMN.String);
			grabin.strings.menu_handler.connect ((m, d) => {
					print ("Strings clicked "+m.to_string ()+": "+d+"\n");
				});
			grabin.relocs.set_actions ("Seek");
			grabin.relocs.menu_handler.connect ((m, d) => {
					print ("Relocations clicked "+m.to_string ()+": "+d+"\n");
				});
			grabin.fat.set_actions ("Load", "Extract");
			grabin.fat.menu_handler.connect ((m, d) => {
					print ("SubBin clicked "+m.to_string ()+": "+d+"\n");
				});
			w.add (grabin);
			w.show_all ();
		}

		private void menuToolsCalculator() {
			var w = new Window (WindowType.TOPLEVEL);
			w.title = "ragui: calculator";
			var grac = new Gracalc.Widget ();
			grac.num = gc.core.num;
			w.add (grac);
			w.show_all ();
		}

		private void menuToolsAssembler() {
			var w = new Window (WindowType.TOPLEVEL);
			w.title = "ragui: assembler";
			var grasm = new Grasmwidget.Widget ();
			w.add (grasm);
			w.show_all ();
		}

		private bool OnWindowCloseEvent(Gdk.Event ev) {
			OnQuit ();
			return true;
		}

		private void menuViewLeftpanel () {
			body_editor.show_panel (body_editor.PanelType.LEFT);
		}

		private void OnMenuEditPreferences () {
			var pw = new Ragui.PreferencesWindow ();
			pw.window_position = WindowPosition.CENTER;
			pw.transient_for = gc.window;//this;
			pw.show_all ();
		}

		public void OnMenuHelpAbout () {
			aboutdialog.transient_for = this;
			aboutdialog.run ();
			aboutdialog.hide ();
		}

		public void OnReportBug () {
			var bd = new BugDialog.Widget ();
			bd.set_transient_for (gc.window);
			bd.message.connect ((str, pini)=> {
				gc.show_message (str);
				if (pini) {
					bd.hide ();
					bd = null;
				}
			});
			bd.show_all ();
		}

		public void OnMenuHelpAPI () {
			// TODO check if vdoc exist in installation directory
			if (FileUtils.test ("vdoc", FileTest.IS_DIR))
 				gc.open_url ("vdoc/index.html");
			else gc.open_url ("http://www.radare.org/vdoc");
		}


		public void view_panel () {
			is_open = false;
			if (panel == null) {
				panel = new MainPanel ();
			//box_body.children = null;
				box_body.add (panel);
			}
			box_body.show_all ();
			view_body_hide_all ();
			panel.show_all ();
			menu_mode.sensitive = false;
			//menu_view.sensitive = false;
			//menu_edit.sensitive = false;
		}

		public void view_body () {
			/* default view */
			// XXX: deprecated with ui_mode (mode) ???
			view_body_editor ();
		}

// TODO: rename panel to body_panel
		public void view_body_hide_all () {
			box_body.show_all ();
			panel.hide ();
			/* hide all bodies */
			body_editor.hide ();
			body_forensics.hide ();
			body_debugger.hide ();
			body_bindiff.hide ();
		}

		public void view_body_bindiff () {
			if (body_bindiff == null) {
				body_bindiff = new BodyBindiff ();
				box_body.add (body_bindiff);
				//box_body.show_all ();
				body_bindiff.diff.set_core (gc.core);
				body_bindiff.diff.file_open.connect (() => {
						var ret = gc.show_file_open ("Select second file");
						if (ret != null) {
							var core = new RCore ();
							core.file_open (ret, 0, 0);
							if (core.file != null) {
								core.bin_load (null);
								body_bindiff.diff.set_core_two (core);
								body_bindiff.diff.diff_bins ();
							}
						}
					});
			}
			box_body.show_all ();
			view_body_hide_all ();
			body_bindiff.show_all ();
			menu_mode.sensitive = true;
		}

		public void view_body_editor () {
			is_open = true;
			if (body_editor == null) {
				body_editor = new BodyEditor ();
				body_editor.goto (gc.core.offset);
				box_body.add (body_editor);
			}
			//menu_view.sensitive = true;
			//menu_edit.sensitive = true;
			menu_mode.sensitive = true;
			box_body.show_all ();
			view_body_hide_all ();
			body_editor.show_all ();
		}

		public void view_body_debugger () {
			if (body_debugger == null) {
				body_debugger = new BodyDebugger ();
				box_body.add (body_debugger);
			}
			menu_mode.sensitive = true;
			box_body.show_all ();
			view_body_hide_all ();
			body_debugger.show_all ();
		}

		public void view_body_forensics() {
			if (body_forensics == null) {
				body_forensics = new BodyForensics ();
				box_body.add (body_forensics);
			}
			box_body.show_all ();
			view_body_hide_all ();
			body_forensics.show_all ();
			menu_mode.sensitive = true;
		}

		public void setup_view () {
			if (body_editor != null)
				body_editor.setup_view ();
		}
	}-
}
