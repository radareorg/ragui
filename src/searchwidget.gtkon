/* ragui - copyright(C) 2010-2011 - pancake<nopcode.org> */
VBox using=Gtk using:r=Radare $Search.Widget {
	HBox !expand {
		ComboBox text !expand $st;
		Entry text="" $entry;
		Button label="search" !expand activate=click_run released=click_run;
	}
	HBox !expand spacing=3 {
		Label label=" from: " !expand;
		Entry editable text="" $from;
		Label label=" to: " !expand;
		Entry editable text="" $to;
		Button label="reset" !expand activate=click_resetrange released=click_resetrange;
		Button label="copy" !expand activate=click_copyrange released=click_copyrange;
		Button label="paste" !expand activate=click_pasterange released=click_pasterange;
	}
	Notebook $nb expand scrollable tab-vborder=1 {
		VBox {
			tab-label { Label label="Results"; }

			ScrolledWindow can-focus expand
					hscrollbar-policy=PolicyType.AUTOMATIC
					vscrollbar-policy=PolicyType.AUTOMATIC {
				TreeView can-focus $tv headers-visible {
					TreeViewColumn title="offset" clickable clicked="{sort_column(tv,0)}" {
						CellRendererText $.col0 expand;
						CellRendererText &col0 attribute="text" column=0;
					}
					TreeViewColumn title="context" clickable clicked="{sort_column(tv,1)}" {
						CellRendererText $.col1 expand;
						CellRendererText &col1 attribute="text" column=1;
					}
				}
			}
		}
	}
-{
	// XXX copypasta from widgets/grabin/grabin.vala
	private void sort_column(TreeView tv, int n) {
print ("SORT COLUMN OR GTFO\n");
		for (int i = 0; i < tv.get_columns ().length (); i++) {
			var col = tv.get_column (i);
			if (i == n) {
				col.set_sort_indicator (true);
				var order = (col.get_sort_order ()==SortType.ASCENDING)?
					SortType.DESCENDING: SortType.ASCENDING;
				col.sort_order = order;
				//tv.get_model ().set_sort_column_id (i, order);
			} else col.set_sort_indicator (false);
		}
	}

	public static ListStore listmodel;

	public static void add_row (string a, string b) {
		TreeIter iter;
		listmodel.append (out iter);
		listmodel.set (iter, 0, a, 1, b, -1);
	}

	public Widget() {
		listmodel = new ListStore (2, typeof (string), typeof (string));
		tv.model = listmodel;
		//nb.set_tab_reorderable (true);
		nb.set_scrollable (true);
		st.append_text ("string");
		st.append_text ("wide string");
		st.append_text ("hexpair");
		st.append_text ("dword");
		st.append_text ("regexp");
		st.append_text ("asm regexp");
		st.set_active (0);
		click_resetrange ();
	}

	const int BSIZE = 4096;
	// XXX CREEPY!!1
	public static int count { get; set; }
	private void click_run () {
		var txt = entry.text;
		entry.text = "";
		var mode = st.get_active_text ();
		switch (mode) {
		case "string":
			gc.core.search.reset (RSearch.Mode.KEYWORD);
			gc.core.search.kw_add (new RSearch.Keyword.str (txt, "", txt, false));
			break;
		case "wide string":
			gc.core.search.reset (RSearch.Mode.KEYWORD);
			gc.core.search.kw_add (new RSearch.Keyword.str (txt, "", txt, false));
			break;
		case "hexpair":
			break;
		case "dword":
			break;
		case "regexp":
			break;
		case "asm regexp":
			break;
		}
		//gc.cmd ("/x 89e8"); // XXX
		gc.core.search.begin ();
		count = 0;
		gc.core.search.set_callback ((x,y,z) => {
				count = count + 1;
				print (@"HIT FOUND!! OW YEAH! $z\n");
				//add_row (@"$z", txt); // the use of txt here segfaults vala internally!!!1 report!!11
				add_row (@"$z", "hit%d".printf (count));
				return 0;
			}, null);
		uint64 f = gc.core.num.get (from.text);
		uint64 t = gc.core.num.get (to.text);
		t = gc.core.bin.curarch.size;
		uint8* buf = new uint8[BSIZE];
		while (f<t) {
			var readed = gc.core.io.read_at (f, buf, BSIZE);
			// TODO: Handle readed..avoid silly bugs
			print (@"readed = $readed\n");
			var ret = gc.core.search.update (ref f, buf, readed);
			if (ret == -1) {
				gc.show_error ("search update error");
				break;
			}
			f += BSIZE;
		}
		gc.show_message (@"$count results!");
	}

	private void click_resetrange () {
		from.text = "0";
		to.text = gc.core.bin.curarch.size.to_string ();
	}

	private void click_copyrange () {
	}

	private void click_pasterange () {
	}
}-
}
