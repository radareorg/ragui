/* Dialogs to open programs to debug */
VBox using=Gtk using:Ragui=Ragui $Ragui.Disasm border_width=5 spacing=5 {
	HBox !expand {
		Button label="&lt;" !expand clicked=undo_seek $prev_button;
		Button label=">" !expand clicked=redo_seek $next_button;
		Label label=" offset: " !expand;
		Entry text="" $entry activate=entry_activated;
	}
	Ragui.TextTagView $ttv;
	-{
		unowned SList<uint64?> offs;
		unowned SList<uint64?> offsredo;

		public uint64 off = 0;

		public void entry_activated () {
			goto (gc.core.num.get (entry.text));
		}

		public void undo_seek() {
			unowned SList<uint64?> p = offs.last ();
			off = p.data;
			offs.remove_link (p);
			offsredo.append (off);
			p = offs.last ();
			offs.remove_link (p);
			off = p.data;
			goto (off, false);
		}

		public void redo_seek() {
			unowned SList<uint64?> p = offsredo.last ();
			off = p.data;
			offsredo.remove_link (p);
			goto (off, false);
		}

		public void goto (uint64 addr, bool clear=true) {
			entry.text = ((string)("0x%"+uint64.FORMAT_MODIFIER+"x")).printf (addr);
			//offi = offs.length ();
			offs.append (off);
			ttv.clear ();
			off = addr;
			dodis (addr, true);
			if (clear)
				offsredo = null;
			/* set buttons */
			prev_button.set_sensitive (offs.length () > 1);
			next_button.set_sensitive (offsredo.length () > 0);
		}

		public void dodis (uint64 addr, bool app=true) {
			gc.seek (addr);
			gc.cmd ("e asm.bytes=0");
			gc.cmd ("e io.va=1");
			gc.cmd (@"s $addr");
			var dis = gc.cmdstr ("b 512 && pd");
			dis = dis.replace ("&", "&amp;");
			dis = dis.replace ("<", "&lt;");
			dis = dis.replace (">", "&gt;");
			dis = dis.replace ("&lt;", "<c red,b>&lt;</>");
			dis = dis.replace ("&gt;", "<c red,b>&gt;</>");
			dis = dis.replace ("|", "<c red,b>|</>");
			dis = dis.replace ("-", "<c red,b>-</>");
			dis = dis.replace ("=", "<c red,b>=</>");
			try {
				var regex = new Regex ("(0x[a-zA-Z\\d]+)");
				dis = regex.replace (dis, -1, 0, "<a \\1>\\1</>");

				regex = new Regex (";(.*)$");
				dis = regex.replace (dis, -1, 0, "<c green>;\\1</>\n");
			} catch (RegexError e) {
				warning ("%s", e.message);
			}
			//dis = dis.replace ("mov", "<c green>mov</c>");
			ttv.set_markup (dis, app);
			entry.text = ((string)("0x%"+uint64.FORMAT_MODIFIER+"x")).printf (addr);
		}

		public Disasm() {
			ttv.set_style ("*", "f mono");
			ttv.control_key.connect ((k) => {
				switch (k) {
				case 'g':
					var foo = gc.show_input ("offset?");
					if (foo != null)
						goto (gc.core.num.get (foo));
					return true;
				}
				return false;
			});
			ttv.menu_construct.connect ((m) => {
				ttv.set_actions ("goto", "goto ..", "analyze", "breakpoint",
					"drop breakpoint", "assemble", "write bytes", "refresh", "copy");
			});
			ttv.menu_handler.connect ((m, w) => {
				var newoff = gc.core.num.get (w);
				if (newoff == 0)
					newoff = off;
				print ("WORD (%s)\n", w);
				switch (m.to_string ()){
				case "goto":
					goto (newoff);
					break;
				case "goto ..":
					var str = gc.show_input ("offset?");
					if (str != null) {
						newoff = gc.core.num.get (str);
						if (newoff == 0)
							newoff = off;
						goto (newoff);
					}
					break;
				case "analyze":
					gc.cmd ("af");
					break;
				case "breakpoint":
					gc.cmd ("bp $newoff");
					break;
				case "drop breakpoint":
					gc.cmd ("bp-$newoff");
					break;
				}
				print ("menu handler");
			});
			ttv.data_handler.connect ((x)=>{
				if (x) {
					dodis (off+512); //, true);
				} else {
					//dodis (off-512, false);
					return false;
				}
				return true;
			});
			ttv.link_clicked.connect ((x)=>{
				goto (gc.core.num.get (x));
			});
			// seek to entrypoint
			var entries = gc.core.bin.get_entries();
			foreach (var e in entries) {
				goto (e.rva);
				break;
			}
		}
	}-
}
